---
title: "Colonial ties"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  warning = FALSE, # show warnings
  message = FALSE, # show messages
  error = TRUE, # do not interrupt generation in case of errors,
  echo = TRUE  # show R code
)
```

### Packages

```{r echo = FALSE}
library(ggthemes)
library(geomtextpath)
library(gbifdb) 
library(tidyverse) 
library(fst) 
library(sf) 
library(terra)
#library(raster)
library(MetBrewer)
library(rnaturalearth)
library(countrycode)
library(arrow)
library(usmap)
library(svglite)
library(scales)
library(rnaturalearth)
library(rnaturalearthdata)
library(countrycode)
library(raster)
library(dplyr)
library(duckdbfs)
#devtools::install_github("vdeminstitute/vdemdata")
#library(vdem)
```

### Connect to GBIF

```{r}
# we use a local copy of the 2024-10-01 snapshop of GBIF to improve the speed of the code of GBIF but this is openly accessible data
#gbif <- open_dataset("s3://public-gbif/2024-10-01")
```

```{r}
duckdb_s3_config(s3_endpoint = "minio.carlboettiger.info") 
gbif <- open_dataset("s3://public-gbif/2024-10-01")
```

```{r}
country_year_summary_dk <- gbif |> 
    count(countrycode, year, datasetkey) |>
    collect()
```

```{r}
orgs <- read_tsv("https://api.gbif.org/v1/dataset/search/export?format=TSV&") |>
  dplyr::select(publishing_country, dataset_key) |>
  rename(datasetkey = dataset_key) 
```

```{r}
country_year_summary <- country_year_summary_dk |> left_join(orgs) |> dplyr::select(-datasetkey)
```

### Figure 1

Panel A - GBIF

```{r}
df <- gbif |> 
  mutate(latitude = round(decimallatitude,2), 
         longitude = round(decimallongitude,2)) |> 
  #filter(year >1800) |>
  count(longitude, latitude) |> 
  collect()

df_spatial <- df |> 
  filter(!is.na(latitude), 
         !is.na(longitude)) |> 
  st_as_sf(coords = c("longitude", "latitude"), 
           crs = "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m")

write_csv(df, "spatial.csv")

ras_temp <-raster(xmn=-180, xmx=180, ymn=-90, ymx=90,
                  resolution=c(0.1,0.1), vals=NA)
global_plot_all <- rasterize(df_spatial, ras_temp, 
                         field = "n", fun='sum') 
rm(ras_temp) #remove unnecessary data

crs <- "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m" 
global_plot_all <- terra::rast(global_plot_all) 
global_plot <- global_plot_all * 1 # to deal with NAs in this dataset 
# reproject for viz
global_plot_r <- terra::project(global_plot, crs, mask=TRUE) 
# define color gradient
colors <- c("grey", met.brewer(name="Isfahan1",n=20,type="continuous"))
# take log for viz
terra::plot(log(global_plot_r,10), col = colors, axes = FALSE)
writeRaster(global_plot_r, "../figures/Fig1A_data.tif", overwrite=TRUE)

svg("../figures/Fig1A.svg")
terra::plot(log(global_plot_r,10), col = colors, axes = FALSE)
dev.off()

```

Panel B – IUCN

```{r}
crs <- "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m" 
global_plot_all <- terra::rast("../data/Combined_SR_2024.tif") 
global_plot_all <- project(global_plot_all, crs)
#global_plot <- global_plot_all * 1 # to deal with NAs in this dataset 
# reproject for viz
# define color gradient
colors <- c(met.brewer(name="Isfahan1",n=20,type="continuous"))
# take log for viz
terra::plot(global_plot_all, col = colors, axes = FALSE)

svg("../figures/Fig1B.svg")
terra::plot(global_plot_r, col = colors, axes = FALSE)
dev.off()
```

### Figure 2

```{r}
colonial_countries <- read_csv("../data/COLDAT_colonies.csv")[,1:9] |>
  pivot_longer(-country) |>
  group_by(country) |>
  summarise(value = sum(value)) |>
  filter(value >0)

colonial_ties <- read_csv("../data/COLDAT_colonies.csv") |>
  pivot_longer(-c(country, colstart.belgium_max:colend.spain_mean)) |>
    filter(value == 1) |>
  mutate(start = case_when(name ==  "col.britain" ~ colstart.britain_max,
                           name ==  "col.portugal" ~ colstart.portugal_max,
                           name ==  "col.france" ~ colstart.france_max,
                           name ==  "col.spain" ~ colstart.spain_max,
                           name ==  "col.italy" ~ colstart.italy_max,
                           name ==  "col.netherlands" ~ colstart.netherlands_max,
                           name ==  "col.belgium" ~ colstart.belgium_max,
                           name ==  "col.germany" ~ colstart.germany_max,
                           TRUE ~ 1
          )) |>
  mutate(end = case_when(name ==  "col.britain" ~ colend.britain_mean,
                           name ==  "col.portugal" ~ colend.portugal_mean,
                           name ==  "col.france" ~ colend.france_mean,
                           name ==  "col.spain" ~ colend.spain_mean,
                           name ==  "col.italy" ~ colend.italy_mean,
                           name ==  "col.netherlands" ~ colend.netherlands_mean,
                           name ==  "col.belgium" ~ colend.belgium_mean,
                           name ==  "col.germany" ~ colend.germany_mean,
                           TRUE ~ 1
          )) |>
   mutate(colonizer = case_when(name ==  "col.britain" ~ "GB",
                           name ==  "col.portugal" ~ "PT",
                           name ==  "col.france" ~ "FR",
                           name ==  "col.spain" ~ "ES",
                           name ==  "col.italy" ~ "IT",
                           name ==  "col.netherlands" ~ "NL",
                           name ==  "col.belgium" ~ "BE",
                           name ==  "col.germany" ~ "DE",
                           TRUE ~ "Other"
          )) |>
  dplyr::select(country, colonizer, start, end) |>
  mutate(year = map2(start, 2022, seq)) |>
  unnest(cols = year) |>
  mutate(countrycode = countrycode(country, "country.name", "iso2c")) |>
  mutate(name = ifelse(year < end, colonizer, colonizer)) |>
  dplyr::select(-c(country, colonizer, start) )

write_csv(colonial_ties, "../data/colonial_ties.csv")
```

Panel A - Maps

```{r}
world <- ne_countries(scale = "medium", returnclass = "sf") |> dplyr::select(iso_a2,continent) |> 
  st_transform() |> st_make_valid()

# Get centroids of countries
centroids <- st_centroid(world)

# Extract centroid coordinates
centroids_df <- centroids %>%
  st_coordinates()

obs_country <- as_tibble(centroids) |> bind_cols(centroids_df) |> dplyr::select(-geometry) |>
  rename(homelat = Y, homelon = X, countrycode = iso_a2)

pub_country <- as_tibble(centroids) |> bind_cols(centroids_df) |> dplyr::select(-geometry) |>
  rename(travellat = Y, travellon = X, publishing_country = iso_a2)
```

```{r}
main_colonizers <- c("GB",  "PT", "BE", "DE", "ES", "NL")

summary <- country_year_summary |> filter(publishing_country %in% main_colonizers) |>
  left_join(colonial_ties) |> drop_na() |>
  mutate(analysis = ifelse(name == publishing_country , "Colonial",
                                ifelse(countrycode == publishing_country, "InCountry", "other"))) |>
  mutate(colonial_dates = ifelse(year<= end, "colonial", "postcolonial")) |>
  mutate(
    across(everything(), ~replace_na(.x, 0))
  ) |> group_by(countrycode, publishing_country, analysis, colonial_dates) |>
  summarise(n = sum(n, na.rm = T)) |>
  filter(countrycode!=publishing_country) |>
  left_join(obs_country) |> left_join(pub_country |> dplyr::select(-continent)) |>
  dplyr::select(-c(countrycode)) |> dplyr::select(-countrycode) |> drop_na()


# A function that makes a dateframe per connection (we will use these connections to plot each lines)
data_for_connection=function( dep_lon, dep_lat, arr_lon, arr_lat, group){
  inter <- gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, addStartEnd=TRUE, breakAtDateLine=F)             
  inter=data.frame(inter)
  inter$group=NA
  diff_of_lon=abs(dep_lon) + abs(arr_lon)
  if(diff_of_lon > 180){
    inter$group[ which(inter$lon>=0)]=paste(group, "A",sep="")
    inter$group[ which(inter$lon<0)]=paste(group, "B",sep="")
  }else{
    inter$group=group
  }
  return(inter)
}

# Création d'un dataframe complet avec les points de toutes les lignes à faire.
data_ready_plot_pre_post = data.frame()
for(i in c(1:nrow(summary))){
  tmp=data_for_connection(summary$homelon[i], summary$homelat[i], summary$travellon[i], summary$travellat[i] , i)
  tmp$homecontinent=summary$publishing_country[i]
  tmp$n=summary$n[i]
  tmp$colonial=summary$analysis[i]
  tmp$timing = summary$colonial_dates[i]
  data_ready_plot_pre_post=rbind(data_ready_plot_pre_post, tmp)
}

world2 <- st_wrap_dateline(world, options = c("WRAPDATELINE=YES"))

a <- data_ready_plot_pre_post |>
  filter(colonial == "Colonial", 
         homecontinent != "Seven seas (open ocean)") |>
  ggplot() + 
  #annotation_custom(earth, xmax = 180, ymin = -Inf, ymax = Inf) +
  geom_line(size=0.5, aes(x=lon, y=lat, group=group,  size = log(n), color = homecontinent), lwd =1) +
  geom_sf(data = world2, aes(geometry = geometry), alpha = 0.1) +
  scale_color_manual(values = c( "red","#E69F00",  "#CC79A7","#0072B2", "#009E73",  "black")) +
 xlim(-170, 185)+ ylim(-59, 80) +
  theme_classic() +
  theme(legend.position = "none",
    #plot.margin = unit(rep(-1.25,4),"lines"),
   # plot.background = element_rect(fill = "#00001C"),
    #panel.background = element_rect(fill='#00001C',colour='#00001C' ),
    panel.grid=element_blank(), 
    panel.border = element_blank(),
    axis.title=element_blank(),
    axis.text=element_blank(),
    axis.ticks=element_blank()
  )  + facet_wrap(~homecontinent, ncol = 1)

ggsave("../figures/fig2A_maps.png", a, height = 10, width = 2, dpi = 300)
```

Panel A - Bars

```{r}
colonial_ties_unique <- colonial_ties |> 
  dplyr::select(-year) |> 
  distinct() |> 
  filter(countrycode != name)

unique(colonial_ties$name)
# Define main colonizer countries
main_colonizers <- c("GB",  "PT", "BE", "DE", "ES", "NL")

summary <- country_year_summary |>
  left_join(colonial_ties_unique, by = "countrycode") |> #drop_na() |>
  mutate(analysis = ifelse(name == publishing_country , "Colonial",
                                ifelse(countrycode == publishing_country, "InCountry",
                                  "other"))) |>
  mutate(colonial_dates = ifelse(year<= end, "colonial", "postcolonial")) |>
  filter(publishing_country %in% main_colonizers) |>
  #mutate(
  #  across(everything(), ~replace_na(.x, 0))
  #) |> 
  group_by(publishing_country, analysis, colonial_dates) |>
  summarise(n = sum(n, na.rm = T)) 
  #filter(countrycode!=publishing_country) |>
  #left_join(obs_country) |> left_join(pub_country |> dplyr::select(-continent)) |>
  #dplyr::select(-c(countrycode)) |> dplyr::select(-countrycode) |> drop_na()

rr <- summary |> drop_na() |> filter(analysis != "other") |>
  ggplot(aes(x = colonial_dates, fill = publishing_country, alpha = colonial_dates, y = n/1000)) + geom_col(position = "dodge") + facet_wrap(~publishing_country, scales = "free", ncol = 1) + 
  scale_y_continuous(labels = label_number()) + 
   scale_fill_manual(values = c( "red","#E69F00","#CC79A7","#0072B2", "#009E73",  "black")) + scale_alpha_manual(values = c(1, 0.4)) +
  theme_classic() + theme(legend.position = "none") + labs(x = "", y = "# observations (10^3)") +theme(strip.text = element_blank()) + coord_flip()
ggsave("../figures/Fig2A_bar.png", rr, height = 7, width = 2.5, dpi = 300)
```

Panel B

```{r}
colonial_map <- country_year_summary |> left_join(colonial_ties) |> drop_na() |>
  mutate(analysis = ifelse(name == publishing_country , "Colonial",
                                ifelse(countrycode == publishing_country, "InCountry",
                                  "other"))) |>
  mutate(colonial_dates = ifelse(year<= end, "colonial", "postcolonial")) |>
  group_by(analysis, countrycode, colonial_dates, year) |>
  summarize(n = sum(n)) |>
  pivot_wider(names_from = analysis, values_from = n) |>
  mutate(
    across(everything(), ~replace_na(.x, 0))
  ) |>
  group_by(year, colonial_dates, countrycode) |>
  summarise( Colonial = sum(Colonial, na.rm = T),
            InCountry= sum(InCountry, na.rm = T),
            other = sum(other, na.rm = T),
            total = Colonial+InCountry+other)
```

```{r}
unique(colonial_map$countrycode)
figure2b <- colonial_map |> filter(countrycode %in% c("CD", "RW")) |>
  group_by(countrycode, colonial_dates) |>
  summarise( Colonial = sum(Colonial, na.rm = T),
            InCountry= sum(InCountry, na.rm = T),
            other = sum(other, na.rm = T)) |>
  mutate(perc_incountry = InCountry/(InCountry+other+Colonial)) |>
  mutate(perc_colonial = Colonial/(InCountry+other+Colonial)) |>
  mutate(perc_other = other/(InCountry+other+Colonial)) |>
  pivot_longer(c(perc_incountry:perc_other)) |>
  mutate(value = value*100) |>
  ggplot(aes( y = value,x = colonial_dates, fill = name)) +
  geom_col(position = "dodge") + theme_classic() +
  labs(y = "percent of observations", x = "") +
  scale_alpha_manual(values = c(0.3, 1)) +
  scale_fill_manual(values = c("darkblue",  "#E69F00", "lightgrey")) +
  facet_grid(rows = vars(countrycode))

ggsave("../figures/Fig2B.png", figure2b, height = 4, width = 4, dpi = 300)
```

### Figure 3

Panel A

```{r}
oecd_obs <- data.frame(
  countrycode = c("AU", "AT", "BE", "CA", "CL", "CO", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", 
           "HU", "IS", "IE", "IL", "IT", "JP", "KR", "LV", "LT", "LU", "MX", "NL", "NZ", 
           "NO", "PL", "PT", "SK", "SI", "ES", "SE", "CH", "TR", "GB", "US"),
  oecd_obs = "oecd"
)
oecd_pub <- data.frame(
  publishing_country = c("AU", "AT", "BE", "CA", "CL", "CO", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", 
           "HU", "IS", "IE", "IL", "IT", "JP", "KR", "LV", "LT", "LU", "MX", "NL", "NZ", 
           "NO", "PL", "PT", "SK", "SI", "ES", "SE", "CH", "TR", "GB", "US"),
  oecd_pub = "oecd"
)


country_year_oecd <- country_year_summary |> left_join(oecd_obs) |> left_join(oecd_pub) |>
  mutate(oecd_pub = replace_na(oecd_pub, "non-oecd"),
         oecd_obs = replace_na(oecd_obs, "non-oecd"))

line_oecd <- country_year_oecd |> group_by(oecd_pub, oecd_obs, year) |> summarise(n = sum(n, na.rm = T)) |> filter(year >1900 & year <2023) |>
  ggplot(aes(x = year, y =  log(n), color = oecd_pub, linetype = oecd_obs)) + geom_line() + scale_color_brewer(palette = "Set1") +  # Use a colorblind-friendly palette
  scale_linetype_manual(values = c("dashed", "solid")) +  # Ensure clear distinction
  theme_classic() +
  labs(x = "year", y = "number of observations", color = "publication location", linetype = "observation location")  +
  theme(
    legend.position = c(0.3,0.6),
    legend.box = "rect",   # Adds a box around the legend
    legend.background = element_rect(fill = "white", color = "black", linewidth = 0.5),  # Box with black border
    legend.margin = margin(5, 5, 5, 5)  # Add some spacing
  )

ggsave("../figures/Fig3A.png", line_oecd, width = 4, height = 4, dpi = 300)
```

Panel B

```{r}
# Load world map and transform to Robinson projection
world <- ne_countries(scale = "medium", returnclass = "sf") |> 
  st_transform(crs = "+proj=robin")  

# List of OECD countries (ISO 2-letter codes)
oecd_countries <- c("AU", "AT", "BE", "CA", "CL", "CO", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HU", 
                    "IS", "IE", "IL", "IT", "JP", "KR", "LV", "LT", "LU", "MX", "NL", "NZ", "NO", "PL",
                    "PT", "SK", "SI", "ES", "SE", "CH", "TR", "GB", "US")

gbif_nodes <- read_csv("../data/Updated_Country_List_with_ISO_A2.csv")

# Assign OECD status
gbif_nodes <- gbif_nodes %>%
  mutate(OECD_Status = ifelse(ISO_A2 %in% oecd_countries, "OECD", "Non-OECD"))

# Get coordinates of country centroids
world_centroids <- world %>%
  st_centroid() %>%
  mutate(longitude = st_coordinates(.)[,1], latitude = st_coordinates(.)[,2]) %>%
  dplyr::select(iso_a2, longitude, latitude)

# Merge GBIF nodes with coordinates
gbif_nodes <- gbif_nodes %>% rename(iso_a2 = ISO_A2) |>
  left_join(world_centroids)

# Plot the map
map_nodes <- ggplot() +
  geom_sf(data = world, fill = "gray90", color = "white") +  # Base world map
  geom_point(data = gbif_nodes, aes(x = longitude, y = latitude, color = OECD_Status, shape = Membership), 
             size = 2, alpha = 0.9) +  
  scale_color_brewer(palette = "Set1") +# GBIF Nodes
  #scale_color_manual(values = c("OECD" = "blue", "Non-OECD" = "red")) +  # Colors
  labs(
       x = "", y = "", color = "") +
  theme_map() +
  theme(legend.position = "bottom",
        legend.box = "rect",
        legend.background = element_rect(fill = "white", color = "black"),
        panel.grid = element_blank())

ggsave("../figures/Fig3B.png", map_nodes, width = 4, height = 4, dpi = 300)
```

### Figure 4

```{r}
unzip("../data/V-Dem-CY-Core-v15_csv.zip")
vdem <- read_csv("../scripts/V-Dem-CY-Core-v15_csv/V-Dem-CY-Core-v15.csv") |>
   dplyr::select(country_text_id, year, v2x_freexp,v2xcl_dmove, v2x_regime) |>
  mutate(countrycode = countrycode(country_text_id, origin = "iso3c", destination = "iso2c")) |> dplyr::select(-country_text_id)
```

```{r}
scatter_plot <- country_year_summary |>
  left_join(vdem) |> filter(year >1900) |> drop_na() |>
  group_by(countrycode, year) |> summarise(n = sum(n),
                                        v2x_freexp = mean(v2x_freexp),
                                        v2xcl_dmove = mean(v2xcl_dmove),
                                        v2x_regime = mean(v2x_regime)) |>
    mutate(v2x_regime = as.factor(v2x_regime),
          v2x_regime = recode(v2x_regime,"0" = "Closed autocracy", "1" = "Electoral autocracy", "2"= "Electoral democracy", "3"= "Liberal democracy")) |>
  ggplot(aes(x = v2x_freexp, y = log(n), color = year)) +
  geom_point(alpha = 0.4, size = 2) + 
  geom_smooth(method = "loess", color = "black", se = FALSE) +
  scale_color_viridis_c(option = "magma") + 
  theme_bw() +
  labs(
    x = "Freedom of Expression Index",
    y = "log(# observations)",
    color = "Year",
  ) + scale_x_continuous(
    breaks = function(x) pretty(x, n = 5), 
    labels = function(x) ifelse(x == 0, "0", sprintf("%.1f", x))
  ) +
  facet_wrap(~v2x_regime, ncol = 4)
ggsave("../figures/Fig4.png", scatter_plot, dpi = 300, width = 8, height = 3.5)
```

